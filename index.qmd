---
title: Retrospective clinical data harmonisation reporting
author: Jeremy Selva [`r fontawesome::fa(name = "linkedin", fill = "#0077ac")`](https://www.linkedin.com/in/jeremy-selva-085b9112a/){target="_blank"} <br> @JauntyJJS [`r fontawesome::fa(name = "github", fill = "#000000")`](https://github.com/JauntyJJS){target="_blank"} [`r fontawesome::fa(name = "fab fa-square-x-twitter", fill = "#000000")`](https://twitter.com/JauntyJJS){target="_blank"} [`r fontawesome::fa(name = "bluesky", fill = "#1084ff")`](https://bsky.app/profile/jauntyjjs.bsky.social){target="_blank"} [<svg aria-hidden="true" role="img" viewBox="0 0 512 512" style="height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#5f53e7;overflow:visible;position:relative;"><path d="M433 179.1c0-97.2-63.7-125.7-63.7-125.7-62.5-28.7-228.6-28.4-290.5 0 0 0-63.7 28.5-63.7 125.7 0 115.7-6.6 259.4 105.6 289.1 40.5 10.7 75.3 13 103.3 11.4 50.8-2.8 79.3-18.1 79.3-18.1l-1.7-36.9s-36.3 11.4-77.1 10.1c-40.4-1.4-83-4.4-89.6-54a102.5 102.5 0 0 1 -.9-13.9c85.6 20.9 158.7 9.1 178.8 6.7 56.1-6.7 105-41.3 111.2-72.9 9.8-49.8 9-121.5 9-121.5zm-75.1 125.2h-46.6v-114.2c0-49.7-64-51.6-64 6.9v62.5h-46.3V197c0-58.5-64-56.6-64-6.9v114.2H90.2c0-122.1-5.2-147.9 18.4-175 25.9-28.9 79.8-30.8 103.8 6.1l11.6 19.5 11.6-19.5c24.1-37.1 78.1-34.8 103.8-6.1 23.7 27.3 18.4 53 18.4 175z"/></svg>](https://fosstodon.org/@JauntyJJS){target="_blank"} <br> [*https://jeremy-selva.netlify.app* `r fontawesome::fa(name = "link", fill = "#666666")`](https://jeremy-selva.netlify.app/){target="_blank"} <br> For [R/Medicine 2025 `r fontawesome::fa(name = "link", fill = "#666666")`](https://rconsortium.github.io/RMedicine_website/){target="_blank"}
date: 2025-06-12
date-format: "D[<sup style='font-size:65%;font-style:italic;'>th</sup>] MMMM YYYY"
format:
  revealjs:
    theme: [custom.scss]
    mainfont: "Lato"
    code-line-numbers: true
    code-annotations: false
    code-overflow: scroll
    controls: true
    progress: true
    #slide-number: true # slide number determined be no_logo_at_title_slide.js
    scrollable: true
    transition: fade
    background-transition: fade
    highlight-style: breeze
    # logo: images/qr.png
    pointer:
      pointerSize: 24
      color: '#32cd32'
    include-after-body: no_logo_at_title_slide.js
    # include-in-header: 
    #   text: |
    #     <meta name="github-repo" content="JauntyJJS/rugs_20241129" />
    #     <meta name="twitter:title" content="Introduction to Quarto Dashboards" />
    #     <meta name="twitter:description" content="Presentation for R User Group Singapore Meetup on 29 November 2024." />
    #     <meta name="twitter:url" content="https://jauntyjjs.github.io/rugs_20241129" />
    #     <meta name="twitter:image" content="https://raw.githubusercontent.com/JauntyJJS/rugs_20241129/main/share-card.png" />
    #     <meta name="twitter:image:alt" content="Title slide of Introduction to Quarto Dashboards presented at R User Group Singapore Meetup on 29 November 2024." />
    #     <meta name="twitter:card" content="summary_large_image" />
    #     <meta name="twitter:creator" content="@JauntyJJS" />
    #     <meta name="twitter:site" content="@JauntyJJS" />
    #     <meta property="og:title" content="Introduction to Quarto Dashboards" />
    #     <meta property="og:description" content="Presentation for R User Group Singapore Meetup on 29 November 2024." />
    #     <meta property="og:url" content="https://jauntyjjs.github.io/rugs_20241129" />
    #     <meta property="og:image" content="https://raw.githubusercontent.com/JauntyJJS/rugs_20241129/main/share-card.png" />
    #     <meta property="og:image:alt" content="Title slide of Introduction to Quarto Dashboards presented at R User Group Singapore Meetup on 29 November 2024." />
    #     <meta property="og:site_name" content="R User Group Singapore Meetup on 29 November 2024" />
    #     <meta property="og:type" content="website" />
    #     <meta property="og:locale" content="en_UK" />
    #     <meta property="article:author" content="Jeremy Selva" />
revealjs-plugins:
  - pointer
filters:
  - code-fullscreen
params:
  show_table: TRUE
---

```{r}
#| label: for presentation
#| include: false

library(fontawesome)
library(knitr)
library(yaml)
library(rmarkdown)

out_type <- knitr::opts_chunk$get("rmarkdown.pandoc.to")
```

```{r}
#| label: for harmonisation
#| include: false
#| echo: false

library(dplyr)
library(magrittr)
library(forcats)
library(here)
library(testthat)
library(readxl)
library(vroom)
library(pointblank)
library(reactable)

source("R/factor-reactable.R")
source("R/integer-check.R")
source("R/rounding.R")

```

## Outline

Data harmonisation overview strategy

Cover ways to counter small but annoying issues during retrospective data harmonisation.

Suggested reports and diagrams to create for different clients.

## Automated capture of warnings (csv)

When reading files in batches or the same file but in a different version, is there an automated way to catch warnings/issues when reading csv ?

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: read data with warnings csv
#| echo: true
#| code-line-numbers: "|9"
#| warning: true

cohort_data_csv <- vroom::vroom(
  file = here::here("data-raw", "Cohort_csv", 
    "data_to_harmonise_age_issue.csv"),
  delim = ",",
  col_select = 1:2,
  show_col_types = FALSE,
  col_types = list(
    ID = vroom::col_character(), 
    Age = vroom::col_integer()
  )
)

head(cohort_data_csv, n = 3)

```

:::

::: {.column width="50%"}

![](images/age_issue_csv.jpg){fig-alt="A csv file with text data in the Age column." fig-align="center" width="100%"}

:::

::::

## Automated capture of warnings (csv)

If there are issues with the data, the output of [`vroom::problems`](https://vroom.r-lib.org/reference/problems.html){target="_blank"} will be a tibble.

```{r}
#| label: view problem in vroom
#| echo: true
#| warning: true

cohort_data_csv |> 
  vroom::problems()

```

To check for this in an automatically, we can use [`pointblank::expect_row_count_match`](https://rstudio.github.io/pointblank/reference/row_count_match.html){target="_blank"}.

```{r}
#| label: safeguard problem with vroom and pointblank
#| echo: true
#| error: true

cohort_data_csv |> 
  vroom::problems() |> 
  pointblank::expect_row_count_match(count = 0)

```

## Automated capture of warnings (csv)

Here is a case with no issues.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: read data with no issues csv
#| echo: true
#| warning: true

cohort_data_csv <- vroom::vroom(
  file = here::here("data-raw", "Cohort_csv", 
    "data_to_harmonise_age_issue_fixed.csv"),
  delim = ",",
  col_select = 1:2,
  show_col_types = FALSE,
  col_types = list(
    ID = vroom::col_character(), 
    Age = vroom::col_integer()
  )
)

cohort_data_csv |> 
  vroom::problems()

```

```{r}
#| label: read data with no issues csv safeguard
#| echo: true
#| warning: true

cohort_data_csv |> 
  vroom::problems() |> 
  pointblank::expect_row_count_match(count = 0)

```

:::

::: {.column width="50%"}

![](images/age_issue_fixed_csv.jpg){fig-alt="A csv file with only integer data in the Age column." fig-align="center" width="100%"}

:::

::::

## Automated capture of warnings (Excel)

Is there an automated way to catch warnings/issues when reading Excel ?

::: {.column width="50%"}

```{r}
#| label: read data with warnings Excel
#| echo: true
#| warning: true

cohort_data_excel <- readxl::read_excel(
  path = here::here("data-raw", "Cohort_Excel", 
    "data_to_harmonise_age_issue.xlsx"),
  sheet = "Sheet1",
  col_types = c(
    "text", "numeric"
    )
  )
```

:::

::: {.column width="50%"}

![](images/age_issue_excel.jpg){fig-alt="An Excel file with text data in the Age column." fig-align="center" width="100%"}

:::

## Automated capture of warnings (Excel)

We can read the Excel file with [`testthat::expect_no_condition`](https://testthat.r-lib.org/reference/expect_error.html){target="_blank"}.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: read data with issues using testthat
#| echo: true
#| code-line-numbers: "|1,8"
#| error: true

testthat::expect_no_condition(
  cohort_data_excel <- readxl::read_excel(
    path = here::here("data-raw", "Cohort_Excel", 
      "data_to_harmonise_age_issue.xlsx"),
    sheet = "Sheet1",
    col_types = c("text", "numeric")
  )
)
```

:::

::: {.column width="50%"}

![](images/age_issue_excel.jpg){fig-alt="An Excel file with text data in the Age column." fig-align="center" width="100%"}

:::

::::

## Automated capture of warnings (Excel)

However, this method means that you will lose the pipe workflow.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: read data without issues using testthat
#| echo: true

testthat::expect_no_condition(
  cohort_data_excel <- readxl::read_excel(
    path = here::here("data-raw", "Cohort_Excel", 
      "data_to_harmonise_age_issue_fixed.xlsx"),
    sheet = "Sheet1",
    col_types = c("text", "numeric")
  )
)

cohort_data_excel <- cohort_data_excel |> 
  # Check if Serial Number is unique
  pointblank::rows_distinct(
    columns = "Serial Number",
  )
```

:::

::: {.column width="50%"}

![](images/age_issue_fixed_excel.jpg){fig-alt="An Excel file with numeric data in the Age column." fig-align="center" width="100%"}

:::

::::

## Automated capture of warnings (Excel)

We can use the tee pipe operator [`%T>%`](https://magrittr.tidyverse.org/reference/tee.html){target="_blank"}.

:::: {.columns}

::: {.column width="50%"}

:::{.center-h}
[**With Issues**]{style="font-size: 80%;"}
:::

```{r}
#| label: read data with issues using testthat and tee pipe
#| echo: true
#| code-line-numbers: "|8,9"
#| error: true

cohort_data_excel <- readxl::read_excel(
  path = here::here("data-raw", "Cohort_Excel", 
    "data_to_harmonise_age_issue.xlsx"),
  sheet = "Sheet1",
  col_types = c(
    "text", "numeric"
    )
  ) %T>%
  testthat::expect_no_condition()
```

:::

::: {.column width="50%"}

:::{.center-h}
[**No Issues**]{style="font-size: 80%;"}
:::

```{r}
#| label: read data without issues using testthat and tee pipe
#| code-line-numbers: "|6,7"
#| echo: true

cohort_data_excel_2 <- readxl::read_excel(
  path = here::here("data-raw", "Cohort_Excel", 
    "data_to_harmonise_age_issue_fixed.xlsx"),
  sheet = "Sheet1",
  col_types = c("text", "numeric")
) %T>%
testthat::expect_no_condition() |> 
# Check if Serial Number is unique
  pointblank::rows_distinct(
    columns = "Serial Number",
)

```

:::

::::

## Variable Mapping

![](images/variable_mapping_workflow.png){fig-alt="Variable Mapping Reporting Workflow. Starting with introducing the mapping procedure, writing code to do mapping ans validation, showing that the code works, clean up data for merging." fig-align="center" width="100%"}

## Variable Mapping

Let take this data set as an example.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: read csv data
#| echo: true

cohort_csv_data <- vroom::vroom(
  file = here::here("data-raw",
                    "Cohort_csv",
                    "data_to_harmonise.csv"),
  delim = ",",
  col_select = 1:8,
  show_col_types = FALSE,
  col_types = list(
    ID = vroom::col_character(),
    Age = vroom::col_integer(),
    Sex = vroom::col_character(),
    Height = vroom::col_double(),
    Weight = vroom::col_double(),
    `Smoke History` = vroom::col_character(),
    `Chest Pain Character` = vroom::col_character(),
    Dyspnea = vroom::col_character()
    )
  ) |>  
  dplyr::rename(cohort_unique_id = "ID") |>
  # Remove rows when the ID value is NA
  dplyr::filter(!is.na(.data[["cohort_unique_id"]])) |>
  # Remove white spaces in column names
  dplyr::rename_all(stringr::str_trim) |> 
  # Check if cohort id is unique
  pointblank::rows_distinct(
    columns = "cohort_unique_id",
  )

cohort_csv_data |> 
  vroom::problems() |> 
  pointblank::expect_row_count_match(count = 0)

```

:::

::: {.column width="50%"}

```{r}
#| label: print csv data
#| echo: false
 
cohort_csv_data |> 
  dplyr::mutate(
    Sex = forcats::fct_relevel(.data[["Sex"]], c("Male", "Female")),
    `Smoke History` = forcats::fct_relevel(
      .data[["Smoke History"]], 
      c("non-smoker", "past smoker", "current smoker")
    ),
    `Chest Pain Character` = forcats::fct_relevel(
      .data[["Chest Pain Character"]], 
      c("no chest pain", "nonanginal", "atypical", "typical")
    ),
    `Dyspnea` = forcats::fct_relevel(
      .data[["Dyspnea"]], 
      c("no", "yes")
    ),
  ) |> 
  reactable_with_download_csv_button(
    defaultPageSize = 5,
    paginationType = "jump",
    style = list(fontSize = "1rem"),
  )

```

:::

::::

## Variable Mapping

Let the reader know how the collaborator data `Smoke History` is going to be mapped.

![](images/mapping_procedure.png){fig-alt="Documentation indicating how the collaborator's data Smoke History is going to be mapped or harmonised in Quarto code and output." fig-align="center" width="100%"}

## Variable Mapping

![](images/code_to_map.png){fig-alt="Code to do mapping." fig-align="center" width="30%"}

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: smoking data harmonisation
#| echo: true
#| code-line-numbers: "|2,3|5-14"

smoking_data <- cohort_csv_data |>
  dplyr::select(c("cohort_unique_id", 
                  "Smoke History")) |>
  dplyr::mutate(
    smoke_current = dplyr::case_when(
      is.na(.data[["Smoke History"]]) ~ "-1",
      .data[["Smoke History"]] == "non-smoker" ~ "0",
      .data[["Smoke History"]] == "past smoker" ~ "0",
      .data[["Smoke History"]] == "current smoker" ~ "1",
      .default = NA_character_
    ),
    smoke_current = forcats::fct_relevel(
      .data[["smoke_current"]],
      c("0", "1")), 
    smoke_past = dplyr::case_when(
      is.na(.data[["Smoke History"]]) ~ "-1",
      .data[["Smoke History"]] == "non-smoker" ~ "0",
      .data[["Smoke History"]] == "past smoker" ~ "1",
      .data[["Smoke History"]] == "current smoker" ~ "0",
      .default = NA_character_
    ),
    smoke_past = forcats::fct_relevel(
      .data[["smoke_past"]],
      c("0", "1")),
    `Smoke History` = forcats::fct(
      .data[["Smoke History"]]
    )
  )

```

:::

::: {.column width="50%"}

![](images/smoking_history_documentation.png){fig-alt="Documentation of harmonisation of smoking history." fig-align="center" width="100%"}

:::

::::

## Variable Mapping

![](images/code_to_validate.png){fig-alt="Code to do validation." fig-align="center" width="30%"}

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: smoking data validation
#| echo: true

smoking_data <- smoking_data |>
  pointblank::col_vals_in_set(
    columns = c("smoke_current", "smoke_past"),
    set = c("0", "1", "-1")
  ) |> 
  pointblank::col_vals_expr(
    expr = pointblank::expr(
      (.data[["smoke_current"]] == "1" & .data[["smoke_past"]] == "0") |
      (.data[["smoke_current"]] == "-1" & .data[["smoke_past"]] == -"1") |
      (.data[["smoke_current"]] == "0" & .data[["smoke_past"]] %in% c("0", "1"))
    )
  )

```

:::

::: {.column width="50%"}

![](images/smoking_history_validation.png){fig-alt="Documentation of harmonisation of smoking history." fig-align="center" width="100%"}

:::

::::

Reference: <https://github.com/rstudio/pointblank/issues/578>

## Variable Mapping

:::: {.columns}

::: {.column width="50%"}

![](images/example_works.png){fig-alt="Show examples that the code works." fig-align="center" width="100%"}
![](images/print_reactable.png){fig-alt="Code to print the reactable in html file." fig-align="center" width="100%"}

:::

::: {.column width="50%"}

:::{.center-h}
[**Html Output**]{style="font-size: 80%;"}
:::

```{r}
#| label: smoking data html

smoking_data |> 
  reactable_with_download_csv_button(
    defaultPageSize = 5,
    paginationType = "jump",
    style = list(fontSize = "1rem"),
  )

```

:::

::::

## Variable Mapping

:::: {.columns}

::: {.column width="50%"}

![](images/example_works.png){fig-alt="Show examples that the code works." fig-align="center" width="100%"}
![](images/print_code_pdf.png){fig-alt="Code to print the table in pdf file." fig-align="center" width="100%"}

:::

::: {.column width="50%"}

:::{.center-h}
[**Pdf Output**]{style="font-size: 80%;"}
:::

![](images/print_pdf.png){fig-alt="Output code in pdf file." fig-align="center" width="100%"}

![](images/print_pdf_2.png){fig-alt="Output table in pdf file." fig-align="center" width="100%"}
:::

::::

## Variable Mapping

:::: {.columns}

::: {.column width="50%"}

![](images/clean_for_merging.png){fig-alt="Clean for merging." fig-align="center" width="50%"}
```{r}
#| label: smoking data for merging
#| echo: true

smoking_data <- smoking_data |>
  dplyr::select(-c("Smoke History"))

```

:::

::: {.column width="50%"}

```{r}
#| label: smoking data for merging html

smoking_data |> 
  reactable_with_download_csv_button(
    defaultPageSize = 5,
    paginationType = "jump",
    style = list(fontSize = "1rem"),
  )

```

:::

::::

## Merging Harmonised Data

Supposed we have completed harmonising a batch of clinical data. How can we merge them without issues of missing rows or additional columns ?

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: age gender data

age_gender_data <- cohort_csv_data |>
  dplyr::select(c("cohort_unique_id", 
                  "Age", 
                  "Sex")) |>
  pointblank::col_vals_expr(
    expr = ~is_integer_vector(
      cohort_A_data[["age"]],
      allow_na = TRUE)
  ) |>
  dplyr::mutate(
    # Convert age to type integer
    age_years = as.integer(.data[["Age"]]),
    # Convert categorical columns to factors
    sex = dplyr::case_when(
      .data[["Sex"]] == "Female" ~ "0",
      .data[["Sex"]] == "Male" ~ "1",
      .default = NA_character_
    ),
    `Sex` = forcats::fct_relevel(
      .data[["Sex"]],
      c("Female", "Male")
    ),
    sex = forcats::fct_relevel(
      .data[["sex"]],
      c("0", "1")),
  ) |>
  dplyr::relocate(
    "sex",
    .before = "Sex"
  ) |> 
  dplyr::relocate(
    "age_years",
    .after = "Age"
  ) |>
  pointblank::col_vals_in_set(
    columns = "sex",
    set = c("0", "1")
  ) |> 
  pointblank::col_vals_between(
    columns = "age_years",
    left = 0,
    right = 100,
    inclusive = c(FALSE, TRUE),
    na_pass = TRUE
  ) |>
  dplyr::select(-c("Age", "Sex"))

```

```{r}
#| label: age gender data for merging html
#| echo: true

age_gender_data |> 
  reactable_with_download_csv_button(
    defaultPageSize = 5,
    paginationType = "jump",
    style = list(fontSize = "1rem"),
  )

```

:::

::: {.column width="50%"}

```{r}
#| label: body measurement data

body_measurement_data <- cohort_csv_data |>
  dplyr::select(c("cohort_unique_id", 
                  "Height", "Weight")) |>
  dplyr::mutate(
    height_cm = .data[["Height"]],
    weight_kg = .data[["Weight"]],
    bsa_m2 = sqrt((.data[["height_cm"]] * .data[["weight_kg"]]) / 3600),
    bsa_m2 = round_to_nearest_digit(.data[["bsa_m2"]], digits = 2),
    bmi = .data[["weight_kg"]] / ((.data[["height_cm"]] / 100)^2),
    bmi = round_to_nearest_digit(.data[["bmi"]], digits = 2),
    height_cm = round_to_nearest_digit(.data[["height_cm"]], digits = 2),
    weight_kg = round_to_nearest_digit(.data[["weight_kg"]], digits = 2)
  ) |> 
  pointblank::col_vals_between(
    columns = "bmi",
    left = 10,
    right = 50,
    inclusive = c(TRUE, TRUE),
    na_pass = TRUE
  ) |>
  dplyr::select(-c("Height", "Weight"))

```

```{r}
#| label: body measurement data for merging html
#| echo: true

body_measurement_data |> 
  reactable_with_download_csv_button(
    defaultPageSize = 5,
    paginationType = "jump",
    style = list(fontSize = "1rem"),
  )

```

:::

::::

## Merging Harmonised Data

`unmatched = "error"` in [`dplyr::left_join`](https://dplyr.tidyverse.org/reference/mutate-joins.html){target="_blank"} helps to avoid patients with no match.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: demo behave data
#| code-line-numbers: "|4|7,11,15"
#| echo: true

join_specification <- dplyr::join_by("cohort_unique_id")

demo_behave_data <- cohort_csv_data |>
  dplyr::select(c("cohort_unique_id")) |>
  dplyr::left_join(age_gender_data,
                   by = join_specification,
                   unmatched = "error",
                   relationship = "one-to-one") |>
  dplyr::left_join(body_measurement_data,
                   by = join_specification,
                   unmatched = "error",
                   relationship = "one-to-one") |>
  dplyr::left_join(smoking_data,
                   by = join_specification,
                   unmatched = "error",
                   relationship = "one-to-one") |>
  dplyr::relocate(c("bsa_m2", "bmi"),
                  .after = "sex")

```

:::

::: {.column width="50%"}

```{r}
#| label: penguin error
#| echo: true
#| code-line-numbers: "|5,12,19"
#| warning: true
#| error: true

three_penguins <- tibble::tribble(
  ~samp_id, ~species,    ~island,
  1,        "Adelie",    "Torgersen",
  2,        "Gentoo",    "Biscoe",
  3,        "Chinstrap", "Dream"
)

weight_extra <- tibble::tribble(
  ~samp_id,  ~body_mass_g,
  1,         3220,
  2,         4730,
  4,         4725
)

three_penguins |> 
  dplyr::left_join(
    y = weight_extra,
    by = dplyr::join_by("samp_id"),
    unmatched = "error"
 ) 

```

:::

::::

Reference: <https://www.tidyverse.org/blog/2023/08/teach-tidyverse-23/#improved-and-expanded-_join-functionality>

## Merging Harmonised Data

`relationship = "one-to-one` in [`dplyr::left_join`](https://dplyr.tidyverse.org/reference/mutate-joins.html){target="_blank"} helps to avoid patients with multiple match.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: demo behave data 2
#| code-line-numbers: "|8,12,16"
#| echo: true

join_specification <- dplyr::join_by("cohort_unique_id")

demo_behave_data <- cohort_csv_data |>
  dplyr::select(c("cohort_unique_id")) |>
  dplyr::left_join(age_gender_data,
                   by = join_specification,
                   unmatched = "error",
                   relationship = "one-to-one") |>
  dplyr::left_join(body_measurement_data,
                   by = join_specification,
                   unmatched = "error",
                   relationship = "one-to-one") |>
  dplyr::left_join(smoking_data,
                   by = join_specification,
                   unmatched = "error",
                   relationship = "one-to-one") |>
  dplyr::relocate(c("bsa_m2", "bmi"),
                  .after = "sex")

```

:::

::: {.column width="50%"}

```{r}
#| label: penguin error 2
#| echo: true
#| code-line-numbers: "|5,11,12,20"
#| warning: true
#| error: true

three_penguins <- tibble::tribble(
  ~samp_id, ~species,    ~island,
  1,        "Adelie",    "Torgersen",
  2,        "Gentoo",    "Biscoe",
  3,        "Chinstrap", "Dream"
)

weight_extra <- tibble::tribble(
  ~samp_id,  ~body_mass_g,
  1,         3220,
  2,         4730,
  2,         4725,
  3,         4000
)

three_penguins |> 
  dplyr::left_join(
    y = weight_extra,
    by = dplyr::join_by("samp_id"),
    relationship = "one-to-one"
 ) 

```

:::

::::

Reference: <https://www.tidyverse.org/blog/2023/08/teach-tidyverse-23/#improved-and-expanded-_join-functionality>

## Merging Harmonised Data 

Use [`pointblank::has_columns`](https://rstudio.github.io/pointblank/reference/has_columns.html){target="_blank"} to ensure we also have harmonised variables.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: demo behave data validation
#| echo: true

testthat::expect_false(
  pointblank::has_columns(
    demo_behave_data,
    columns = c(dplyr::ends_with(".x"), dplyr::ends_with(".y"))
  )
)

testthat::expect_equal(
  ncol(demo_behave_data), 9
)

testthat::expect_true(
  pointblank::has_columns(
    demo_behave_data,
    columns = c(
      "age_years", "sex",
      "height_cm", "weight_kg", "bsa_m2", "bmi",
      "smoke_current", "smoke_past"
    )
  )
) 

```

:::

::: {.column width="50%"}

```{r}
#| label: penguin error 3
#| echo: true
#| code-line-numbers: "|2,9|24"
#| warning: true
#| error: true

three_penguins <- tibble::tribble(
  ~samp_id, ~species,    ~island,
  1,        "Adelie",    "Torgersen",
  2,        "Gentoo",    "Biscoe",
  3,        "Chinstrap", "Dream"
)

weight_extra <- tibble::tribble(
  ~samp_id,  ~island,
  1,         "Torgersen",
  2,         "Biscoe",
  3,         "Dream"
)

three_penguins <- three_penguins |> 
  dplyr::left_join(
    y = weight_extra,
    by = dplyr::join_by("samp_id"),
    unmatched = "error",
    relationship = "one-to-one"
 )

three_penguins |> 
  pointblank::has_columns(columns = c(dplyr::ends_with(".x"), dplyr::ends_with(".y")))

colnames(three_penguins)

```

:::

::::
